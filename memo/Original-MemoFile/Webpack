이제 브라우저에서 돌아갈 Javascript를 구현할 것이다.

그전에 먼저 WebPack을 설명해야한다.

우리는 현재 package.json을 보면 Bable Node를 사용하는걸 알 수 있다.

이것을 해줘야 우리가 쓰는 코드를 Node.js가 이해할 것이라고 말했다.

이와 같은 과정이 프론트엔드 Javascript 에서도 필요하다.

그리고 스타일을 하기 위해선 CSS를 프론트엔드로 보내야 한다.

일반적으로 CSS를 작성하는 것보다 더 나은 방법이 있는데, Sass이다. Sassy Css, 혹은 SCSS라고 하는데,
나중에 커버를 할것이다.

일단 예시로써 이용해서 설명하자면, .scss로 되어있는 파일을 그대로 냅두면 프론트엔드(브라우저)에서는 받아들여지지 않는다. 그래서 이걸 일반 CSS로 바꿀 필요가 있다. 그래서 이런것을 위해 필요한 것이 WebPack이다.

webpack은 우리가 주는 파일을 받아서 다른파일로 처리, 변경시켜준다. 

스크린샷, 2022-04-06 20-32-46.png

중간다리 역할을 하는 것이다.

보통 일하는 사람들은 Webpack을 잘 안쓰고 대부분이 Webpack이 이미 포함되어 있는 툴들을 쓴다.

그 이유는, 꽤나 복잡하고 재미도 없다.

하지만 이것이 표준이고, 이게 어떻게 작동하는 지 보기위해, 무슨일인지 이해 할 필요가 있다.

먼저 Webpack설치부터 해보자.

npm i webpack webpack-cli --save-dev 혹은 -D를 붙이면 된다.

이것들은 devDependencies에 저장되어야 한다.

webpack.config.js라는 파일을 만들자.

이 파일은 굉장히 오래된 javascirpt 코드만 이해할 수 있다.

여기선 import같은 것을 쓸 수 없고, export도 module.export를 써야한다.

webpack.config에서 반드시 해야하는 두 가지가 있다.

하나는 entry이다.

그리고 하나는 output이 필요하다.

Entry는 우리가 처리하고자 하는 파일들이다.

src가서 client라는 폴더를 만들자. (폴더 명은 client말고도 fontend 혹은 asset이라든지 해서 만들면 된다.

이러면 우리는 client 폴더 안에 있는 코드들은 다 서버가 아니라 브라우저에서 실행될거란 것을 알수있다.

client안에 js라는폴더를 만들고 main.js 파일을만들면된다. client -> js -> main.js

webapck.config의 entry는 다음과 같이 되겠다.

module.exports = {
  entry: "./src/client/js/main.js"
}

output(결과물)을 위해서 파일명을 정해줘야 한다. 그리고 파일을 어디에 저장할 지도 지정해줘야 한다.

module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: "./assets/js",
  },
};

entry에 적은 파일을 전환시켜달라고 webpack에게 말하는 것인데, 이 파일을 변경/전환 시켜서 작업이 끝난후에 그 파일을 output의 path에 적어놓은 directory로 저장되는 것이다. 

webpack은 어떻게 실행시키는 것인가? 그것은 package.json에 가서 'scripts'를 손봐주면 된다.

  "scripts": {
    "dev": "nodemon --exec babel-node src/init.js",
    "assets": "webpack --config webpack.config.js"
  },
  
  이런식으로 해주면 된다.
  
이렇게만 해서 실행을 하면 오류가 발생한다. configuration output의 경로가 absolute path가 아니라는 오류다. 

절대경로란 무엇인가?

말 그대로 Webpack이 폴더로 접근할 수 있는 경로를 처음 시작하는 폴더부터 끝까지 적으라는 것이다.

참고: [Webpack guides](https://webpack.js.org/guides/getting-started/)

이것을 __dirname이 해결해준다. __dirname을 출력해보자.

console.log("Current path is this: " + __dirname);
module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: "./assets/js",
  },
};


스크린샷, 2022-04-07 09-33-16.png

dirname, directory name은 말 그대로 파일까지의 경로 전체를 말하는 것이다.

그러면 path.resolve()는 어떤 역할을 할까?

몇 개가 됐든 입력하는 파트들을모아서 경로로 만들어 주는 것이다.

console.log(path.resolve(__dirname, "assets", "js")); 다음을 출력해보자.

스크린샷, 2022-04-07 09-38-43.png

원하는 전체 경로를 출력해준다.

const path = require("path");

module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "assets", "js"),
  },
};


이렇게 한 후 이제 실행을 하면 assets이란 폴더가 해당 경로에 생성이 된다.

더불어서, 다음과 같은 메세지도 확인을 할 수 있다.

스크린샷, 2022-04-07 09-41-02.png

'mode'옵션이 설정이 안되어 있다는 것이다.

일단 실행을 한 결과를 보면 assets 안에 js가 있고 main.js도 생성된 것을 확인할 수 있다. 

스크린샷, 2022-04-07 09-45-09.png

왼쪽이 작성한 코드이고 오른쪽 코드가 압축된 코드이다. 

재대로 작동하고 있다. 하지만 어떤 코드들은 브라우저가 이해할 수 없는것도 있다.

이 코드에 호환성을 추가해야 한다.

백엔드에서 bable-node가 하는것처럼 프론트엔드 코드 처리를 하고 싶으면 webpack.config.js에서 해줘야 한다.

하지만 그 전에 rules라는 개념을 짚고 넘어가자.

rules는 우리가 각각의 파일 종류에 따라 어떤 전환을 할 건지 결정해준다.

  module: {
    rules: [
      {
        test: /\.css$/i,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  
해당 코드를 봐보자면, 이게 CSS 파일을 위한 rules가 쓰이는 방법이다.

이 rules에 의하면 모든 CSS파일들을 가져다가 이 변환('style-loadr')을 적용시킬거다.

이걸 Webpack용어로 loader이라고 부른다.

그래서 네가 어떤 파일을 가지고 있던지 loader를 찾으면 된다.

즉, 이 경우에는 css-loader랑 style-loader를 사용해서 css 파일들을 변경하는 것이다.

우리는 CSS를 하는게 아니라 javascript를 할거긴하다. 특히 Babel

rules는 Array type이다.

우리는 bable-loader를 사용할건데, 사용하기 앞서 다운로드 해야할 것은 다음과 같다.

npm install -D babel-loader @babel/core @babel/preset-env webpack

loader는 파일들을 변환하는 장치라고 보면 된다.

여기서 babel-loader을 제외하곤 전부 설치되어 있는 상태다.

여기까지 했으면 다음과 같이 사용할 수 있다.

  module: {
    rules: [
      {
        test: /\.js$/,
        use: {
          loader: "babel-loader",
          options: {
            presets: [["@babel/preset-env", { targets: "defaults" }]],
          },
        },
      },
    ],
  },
  
참고: [NPM Babel Loader](https://www.npmjs.com/package/babel-loader)

  
javascirpt 코드를 babel-loader이라는 loader로 가공하는 것이다.

Webpack은 node-modules에서 babel-loader을 찾을거고, 우리는 몇가지 옵션을 건네주는 것이다.

스크린샷, 2022-04-07 10-09-24.png

실행 결과 매우 달라진 것을 확인할 수 있습니다.

const path = require("path");

module.exports = {
  entry: "./src/client/js/main.js",
  output: {
    filename: "main.js",
    path: path.resolve(__dirname, "assets", "js"),
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        use: {
          loader: "babel-loader",
          options: {
            presets: [["@babel/preset-env", { targets: "defaults" }]],
          },
        },
      },
    ],
  },
};

전체 코드를 살펴보자면, 다음과 같이 되어있는데 중요한 것은 이것이다.

기본적으로 모든 webpack.config.js 파일들은 동일한 구조를 갖는다.

entry나 output, rules, 그리고 변형할 파일 

그래서 use이전 까지의 코드들은 이해하고 기억할 필요가 있다.

loader이나 options같은 경우 어떤 loader를 쓰느냐에 따라 달라진다. 왜 다른가? 다음 수업에서 설명.

마지막으로 mode 옵션을 줄건데 개발중인지, 완성품인지 알려줘야한다.

왜? mode를 설정 안해주면 기본으로 webpack은 production mode로 설정될거고 그러면 코드들을 다 압출할텐데 개발 중에는 이러면 좋지 않다.

여기서 localhost:4000/assets/js/main.js로 가면 원하는것처럼 화면이 나올까? 아니다.

아직 Express한테 assets 안에 js 안에 main.js가 있다고 알려주지 않았다. 즉, 서버는 아직 main.js를 모르고 있는 것이다.

앞에서 upload폴더 만들었던것을 기억하는가? 그와 동일하게 하면된다.

static(정적) 파일들을 설정하면 된다.

그래서 이제 우리는 assets폴더를 공개하면 된다.

server.js

app.use("/assets", express.static("assets"));

이렇게 함으로써 localhost:4000/assets/js/main.js 해당 URL에 들어갈 수 있게 되었다.

사실 /assets대신 만약, /static을 쓰면 어떻게 될까??

localhost:4000/static/js/main.js로 가면 화면이 나올까? 나온다. 결국 설정해둔 url이랑 폴더명이랑 달라도 설정해둔 url을 입력하면 해당 폴더로 접근하게 된다는 것이다.

이제 assets/js/main.js를 base.pug랑 연결시켜야 한다.

base.pug를 가서 다음과 같이 해주면 된다.

base.pug

...

...

script(src="/static/js/main.js")


이제 CSS를 처리해보자.

먼저, client폴더 안에 scss폴더를 만들고 그 안에 styles.scss와 _varialbes.scss파일들을 만들어 준다.

우리가 해야할 건, 모든 scss 파일들을 변활할것이다.

그걸 위해 세가지 다른 loader들을 사용할 것이다.

loader을 사용하는 방식에 집중해볼 필요가 있는데, 

하나는 아까까지 봐왔던, Object{객체}를 사용하는 방법이다.

다른 하나는 여러가지 loader들을 가져다가 한 가지의 변형으로 만들 수 있다.

우리는 scss파일을 가져다가 일반적인 css로 바꿀것이다. 

그 다음에 할 것은 바뀐 css를 우리 웹사이트로 불러오는 것이다.

그래서 3가지 loader이 필요한 것이다. 살펴보자.

첫번째 loader는 scss를 가져다가 일반 css로 변형하는 것이고,

두번째 loader는 폰트같은걸 불러올 때 css에 굉장이 유용하게 쓰일 loader이다.

세번째 loader는 변환한 css를 웹사이트에 적용시킬 loader이다.

첫번재 loader는 sass-loader이다. scss를 가져다가 일반 css로 변형해준다.

npm install sass-loader sass webpack --save-dev

그 다음 lodaer은 css-loader이다. 

역할은 쉽게말해 @import랑 url()을 풀어서 해석해준다.

npm install --save-dev css-loader

그 다음으로 필요한 것이 style-loader이다.

style-loader은 css를 DOM에 주입한다. 

npm install --save-dev style-loader

이제 loader을 합쳐야하는데 어떻게 해야할까? 중요한건 제일 마지막 loader부터 시작해야 한다는 것이다.(역순)

      {
        test: /\.scss$/,
        use: ["style-loader", "css-loader", "sass-loader"],
      },
      
왜 역순인가? webpack은 뒤에서부터 시작하기 때문이다. 

(styles-loader가 아닌 것에 주의하자.)

이제 재대로 작동하는지 확인해 보기 위해서 client/js/main.js에 다음과 같이 해주자.

import "../scss/styles.css";
console.log("hi");


_variables.scss

$red: red;

styles.scss

@import "./_variables";

body {
  background-color: $red;
  color: white;
}

이렇게 하고 결과를 보면 다음과 같다.

스크린샷, 2022-04-07 10-59-16.png

webpack은 해당 css코드를 브라우저로 가져가서 head태그 안에 넣어준것을 확인할 수 있습니다.

스크린샷, 2022-04-07 11-01-09.png

몇가지 옵션이 있눈데, 어디에 코드를 적을수 있는지, 어떻게 style을 넣을지 말지이다.

이제 더이상 style-loader를 쓰지 않을 것이다.

참고: [Style Loader](https://webpack.js.org/loaders/style-loader/#root)

해당 페이지를 참고하자. 

webpack.config.js

module.exports = {
  module: {
    rules: [
      {
        test: /\.css$/i,
        use: [
          // The `injectType`  option can be avoided because it is default behaviour
          { loader: "style-loader", options: { injectType: "styleTag" } },
          "css-loader",
        ],
      },
    ],
  },
};

이코드를 보자면, 이건 css-loader와 style-loader를 합치는 예시이다.

이제 볼건, 두 파일을 얻기 위해 webpack plugin을 쓰는 방법이다.

사실 javascript에서 css를 넣기보단, 분리된 css파일을 만들고 싶다.

그 이유는 javascript가 로딘되는 걸 기다려야 하고, 바로 화면에 띄우고 싶기 때문이다.

그래서 MiniCssExtractPlugin을 사용할거다.

npm install --save-dev mini-css-extract-plugin

이건 해당 코드를 다른 파일로 분리시키는 역할을 한다.

const MiniCssExtractPlugin = require("mini-css-extract-plugin");
먼저 webpack.config.js에 이거을 넣어주고, 

      {
        test: /\.scss$/,
        use: [MiniCssExtractPlugin.loader, "css-loader", "sass-loader"],
      },
      
이와같이 해주면 된다.

수정해야될것이 js폴더에 있는데, output을 수정하도록 해주자. 

javascript filename은 main.js으로 둘거고, output은 달라질 것이다.

MiniCssExtractPluigin이 생성된 css파일을 output과 같은 위치에 두고 있다. assets/js폴더에 말이다.

다음과 같이 해주면 된다.

  plugins: [new MiniCssExtractPlugin()],
  output: {
    filename: "js/main.js",
    path: path.resolve(__dirname, "assets"),
  },
  
그러면 assets폴더안에 js폴더 와 main.css가 생길것이고, js폴더안에 main.js파일이 생길 것이다.

그렇다면, css파일도 css폴더에 넣어주려면 어떻게 하면 될것인가?

플러그인을 다음과 같이 수정하면된다.

  plugins: [
    new MiniCssExtractPlugin({
      filename: "css/styles.css",
    }),
  ],
  
이제 template을 수정하면 되는데 아까 우리는 static이라고 설정해두고 assets폴더를 공개적으로 열어놓았다. 그래서 다음과 같이 base.pug가서 수정을 해주면 된다.

link(rel="stylesheet", href="/static/css/styles.css")

이 부분을 추가하면 된다.

이제 두가지를 해주면 된다.

1. 실행하기 전, 항상 asets를 삭제하고 싶다. 왜냐하면 가끔 오래된, 새것이 아닌 복사본들이 남아있다.

2. SCSS나 프론트엔드쪽 자바스크립트에서 무언가를 변경할 때마다 npm un assets를 실행하는건 귀찮다.
자동으로 해줄 필요가 있다.

이제 좀 더 나은 개발 환경을 만들어 줄 차례이다.

먼저 2번을 해결해주기 위해 watch라는 function을 사용할 것이다.

webpack.config.js

...

watch: true,

...

이렇게 하고 npm run assets을 실행하면 이제 종료되지 않을 것이다. 

console로 이제는 두가지를 확인하면 되는 것이다. 

첫번째 console은 back-end를 구동할 것이고, 다른 console은 기본적으로 client파일들을 watch하는 것이다.

이제 신경써야 될것은 자주하는 실수가 node.js만 실행시켜서 발생하는 에러인데, 둘다 실행해야 되는 것에 명심하자.

"npm run assets"			"npm run dev"

여기서 문제점이 추가로 하나 발생하는데, front-end 자바스크립트 코드가 변경된다고 해서 back-end가 다시 재시작한다.

그래서 nodemon을 조금 변경해줄 필요가 있다. 그걸 하기 전에 webpack부터 끝내자.

설정에서 사용할 수 있는 다른 property가 있는데 그것이 바로 clean: true이다.

  output: {
    filename: "js/main.js",
    path: path.resolve(__dirname, "assets"),
    clean: true,
  },

clean의 역할은 말그대로 output folder를 build를 시작하기 전에 clean 해주는 것이다.

또 여기서, 문제가 webpack.config.js파일을 저장할 때 nodemon이 파일을 저장하는줄 알고 재시작 하는것이다.

위와 동일한 문제이다.

이제 nodemon에게 몇가지 파일이나 폴더들을 무사히는 방법을 적어줄것이다.

두 가지 선택지가 있다.

1.pacakge.json파일에 설정하는 것 

-> 여기에다가, 명령문을 작성해서 실행하는 것이 아니고, 설정파일을 하나 생성해야 한다.

    "dev": "nodemon --exec babel-node src/init.js",
    
이런식이 아니라 새로 만든다는 것이다.

nodemon.json으로 명명하고 다음과 같이 해주면 된다.

{
  "ignore": ["webpack.config.js", "src/client/*", "assets/*"],
  "exec": "babel-node src/init.js"
}

이와같이 해주고 package.json은 다음과 같이 해주면된다.

"dev": "nodemon",

이렇게 하면 nodemon.json을 자동적으로 실행해줄 것이다.

궁금해졌다. 만약, 

"assets": "webpack"

이렇게 한다면 어떻게 될까?

문제 없이 실행된다. 즉 webpack.config.js파일이 webpack이 실행 될 때 기본적으로 찾는 설정파일이기 때문에 문제가 없는 것이다.

마지막으로 다음과 같이 해주자.

...
  "scripts": {
    "dev:server": "nodemon",
    "dev:assets": "webpack"
  },
...

   

























